services:
  postgres:
    container_name: postgres
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - ./db_data:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      n8n-network:

  browserless:
    container_name: browserless
    image: ghcr.io/browserless/chromium
    ports:
      - "3000:3000"
    environment:
      - TOKEN=${TOKEN}
    networks:
      n8n-network:
        # Assegniamo un IP fisso
        ipv4_address: 172.25.0.5

  server-n8n:
    container_name: server-n8n
    build:
      context: .
      dockerfile: Dockerfile   
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=user
      - N8N_BASIC_AUTH_PASSWORD=password
      - N8N_HOST=localhost
      - N8N_PORT=5678    
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - WEBHOOK_URL=http://localhost:5678
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_ENDPOINT=ws://172.25.0.5:3000?token=${TOKEN}
    ports:
      - "5678:5678" 
    volumes:
      - ./n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
      browserless:
        condition: service_started
    networks:
      n8n-network:
    extra_hosts:
      - "host.docker.internal:host-gateway"

# Definiamo la subnet per la nostra rete per poter usare IP statici
networks:
  n8n-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24